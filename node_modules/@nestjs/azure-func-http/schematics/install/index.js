"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
function addDependenciesAndScripts() {
    return (host) => {
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@azure/functions',
            version: '^1.0.3'
        });
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        pkg.scripts['start:azure'] = 'npm run build && func host start';
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        return host;
    };
}
function default_1(options) {
    return (host, context) => {
        if (!options.skipInstall) {
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
        const rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
            schematics_1.template(Object.assign({}, core_1.strings, options, { rootDir: options.rootDir, getRootDirectory: () => options.rootDir, stripTsExtension: (s) => s.replace(/\.ts$/, ''), getRootModuleName: () => options.rootModuleClassName, getRootModulePath: () => options.rootModuleFileName }))
        ]);
        return schematics_1.chain([schematics_1.mergeWith(rootSource), addDependenciesAndScripts()]);
    };
}
exports.default = default_1;
